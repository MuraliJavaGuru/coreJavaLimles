Set:
----------
Set is a interface

Child classes:
------------------
HashSet
TreeSet
LinkedHashSet


Why/when should we use set?
-----------------------------------
-> Duplicates are not allowed
-> SEARCH BY CONTENT is very fast


search by position is not applicable in set.
  

HashSet:
---------------------------
Set<String> names = new HashSet<>() ;  // HashSet for string 
Set<Integer> names = new HashSet<>() ;  // HashSet for Integer 
Set<Person> names = new HashSet<>() ;  // HashSet for Person objs 



TreeSet:
---------------------------
Set<String> names = new TreeSet<>() ;  // TreeSet for string 
Set<Integer> names = new TreeSet<>() ;  // TreeSet for Integer 
Set<Person> names = new TreeSet<>() ;  // TreeSet for Person 




LinkedHashSet:
---------------------------
Set<String> names = new LinkedHashSet<>() ;  // LinkedHashSet for string 
Set<Integer> names = new LinkedHashSet<>() ;  // LinkedHashSet for Integer 
Set<Person> names = new LinkedHashSet<>() ;  // LinkedHashSet for Person 



Methods:
-----------------
names.add("java");  -> add element and avoids duplicates
boolean contains = names.contains("user1");   -> serach by content
names.clear();                ->to remove all elements
names.isEmpty(); //returns boolean  -> to check if the set is empty or not
names.remove("user2"); -> remove by content
names.size();   -> returns the no of elements added

display all/iterate each element in a set:
-----------------------------------------------------
for(String p : names){
			System.out.println(p);
}

names.forEach( name -> System.out.println(name));


insertion order : the order in which data is added to the set

	
HashSet  -> avoids duplicates ; But stores the elements in random order ; 
Insertion order is not maintained.


LinkedHashSet -> avoids duplicates ; Insertion order maintained.

Treeset  -> avoids duplicates ; But stores the elements in sorting order ; 
Insertion order is not maintained.




